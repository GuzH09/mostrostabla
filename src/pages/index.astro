---
// Components
import Layout from '../layouts/Layout.astro';
import Skeleton from '../components/ui/Skeleton.astro';

import { Image } from 'astro:assets';

import logo from '../assets/logo.webp';

// Tabla
// https://docs.google.com/spreadsheets/d/e/2PACX-1vSDltLEid06nepxJE3_0v7McOqSbhOqkrSJKd5KWBzGWB2DHWouTS1bE5TCSjREZ8xJHAIn_lMhMrwh/pub?gid=1418425775&single=true&output=csv
// Columnas: Nombre, Jugados, Ganados, Empatados, Perdidos, Puntos, Estado

// Fechas
// https://docs.google.com/spreadsheets/d/e/2PACX-1vSDltLEid06nepxJE3_0v7McOqSbhOqkrSJKd5KWBzGWB2DHWouTS1bE5TCSjREZ8xJHAIn_lMhMrwh/pub?gid=546953721&single=true&output=csv
// Columnas:
// Jugador 1 Equipo 1, Jugador 2 Equipo 1, Jugador 3 Equipo 1, Jugador 4 Equipo 1, Jugador 5 Equipo 1,
// Jugador 1 Equipo 2, Jugador 2 Equipo 2, Jugador 3 Equipo 2, Jugador 4 Equipo 2, Jugador 5 Equipo 2, Fecha, Ganador (E1-E2-Empate), Fecha Numero
---

<Layout title="Mostros Gamer Tabla" description="" lang="es">
  <section class="relative flex min-h-dvh items-start justify-center overflow-hidden pt-20">
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-black/60"></div>
    </div>

    <div class="relative z-10 container mx-auto px-4 text-center text-white">
      <div class="mx-auto max-w-6xl">
        <div class="mb-8">
          <div class="mx-auto mb-6 flex w-1/2 items-center justify-center gap-2">
            <!-- Full Rounded Mostros Gaming Logo: Placeholder for now -->
            <Image src={logo} alt="Cordoba" class="mx-auto mb-2 h-6 w-auto md:h-12" />
          </div>
        </div>

        <div class="container mx-auto px-4">
          <div class="mb-10 text-center">
            <h2 class="mb-6 text-4xl font-bold text-white md:text-5xl">
              <span class="bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent">Tabla</span>
            </h2>
          </div>

          <div class="mx-auto max-w-4xl">
            <!-- Loading state -->
            <div id="tour-loading">
              <Skeleton />
            </div>

            <!-- Dynamic tour dates container -->
            <div id="tour-dates-container"></div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    // Mobile menu functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Date formatting utilities
      const formatDate = (dateStr: string) => {
        // Parse DD/MM/YY format (e.g., "23/05/25")
        const [day, month, year] = dateStr.split('/');
        const fullYear = 2000 + parseInt(year);
        const date = new Date(fullYear, parseInt(month) - 1, parseInt(day));

        return {
          dayNum: day.padStart(2, '0'),
          monthAbbr: getMonthAbbr(parseInt(month) - 1),
          dayOfWeek: getDayAbbr(date.getDay()),
          fullDate: formatFullDate(date),
          dateObj: date,
        };
      };

      const getMonthAbbr = (monthIndex: number): string => {
        const months = ['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN', 'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC'];
        return months[monthIndex];
      };

      const getDayAbbr = (dayIndex: number): string => {
        const days = ['DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB'];
        return days[dayIndex];
      };

      const formatFullDate = (date: Date): string => {
        const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
        return `${date.getDate()} de ${months[date.getMonth()]}, ${date.getFullYear()}`;
      };

      const isDateInPast = (dateObj: Date): boolean => {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        return dateObj.getTime() < today.getTime();
      };

      const createTourCard = (tour: any): string => {
        const status = isDateInPast(tour.dateObj) ? 'Finalizado' : 'Proximamente';
        const badgeClass = status === 'Proximamente' ? 'bg-green-600' : 'bg-gray-600';

        return `
        <div class="mx-auto mb-4 max-w-xl rounded-lg border border-gray-700/50 bg-gray-800/50 transition-all duration-300 hover:bg-gray-800/70">
          <div class="flex items-start flex-row">
            <!-- Date Box -->
            <div class="flex min-w-[100px] flex-col items-center justify-center rounded-tl-lg rounded-tr-lg bg-gray-100 p-4 text-center text-gray-900 md:rounded-l-lg md:rounded-tr-none md:p-6">
              <div class="text-sm font-medium text-gray-500">${tour.monthAbbr}</div>
              <div class="text-3xl font-bold">${tour.dayNum}</div>
              <div class="text-sm text-gray-500">${tour.dayOfWeek}</div>
            </div>

            <!-- Event Details -->
            <div class="w-full p-2 md:p-4">
              <div class="mb-2 flex items-start justify-between">
                <h3 class="text-xl font-bold text-white">${tour.city}</h3>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${badgeClass} text-white">
                  ${status}
                </span>
              </div>

              <div class="space-y-3 text-gray-300">
                <div class="flex items-center space-x-2">
                  <svg class="h-4 w-4 text-orange-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span class="text-sm">${tour.fullDate}</span>
                </div>
                <div class="flex items-center space-x-2">
                  <svg class="h-4 w-4 text-orange-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <span class="text-sm">${tour.location}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      };

      // Fetch CSV from Google Sheets and create tour cards
      const tourLoadingElement = document.getElementById('tour-loading');
      const tourContainer = document.getElementById('tour-dates-container');

      fetch('')
        .then((response) => response.text())
        .then((text) => {
          const lines = text.trim().split('\n');
          // Skip the header row (Fecha,Establecimiento,Ciudad)
          const rows = lines.slice(1);

          const tours = rows.map((line) => {
            const [fecha, establecimiento, ciudad] = line.split(',');
            const dateInfo = formatDate(fecha.trim());

            return {
              ...dateInfo,
              location: establecimiento.trim(),
              city: ciudad.trim(),
            };
          });

          // Sort tours by date
          tours.sort((a: any, b: any) => a.dateObj.getTime() - b.dateObj.getTime());

          // Hide loading and show tours
          if (tourLoadingElement) {
            tourLoadingElement.style.display = 'none';
          }

          if (tourContainer) {
            tourContainer.innerHTML = tours.map(createTourCard).join('');
          }
        })
        .catch((err) => {
          console.error(err);
          if (tourLoadingElement) {
            tourLoadingElement.innerHTML = '<div class="text-red-400">Error cargando las fechas. Intenta nuevamente.</div>';
          }
        });

      // Legacy sheet data element (if exists)
      const sheetDataElement = document.getElementById('sheet-data');
      if (sheetDataElement) {
        fetch('')
          .then((response) => response.text())
          .then((text) => {
            const lines = text.trim().split('\n');
            const rows = lines.slice(1);
            const html = rows.map((line) => line.split(',').slice(1).join(' - ')).join('<br/>');
            sheetDataElement.innerHTML = html;
          })
          .catch((err) => {
            console.error(err);
            sheetDataElement.textContent = 'Failed to load itinerary.';
          });
      }
    });
  </script>
</Layout>
