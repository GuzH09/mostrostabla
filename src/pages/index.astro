---
// Components
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import logo from '../assets/logo.webp';
---

<Layout title="Torneo Oficial Viernes de Gordos" description="Torneo oficial viernes de gordos sponsoreado por Mostros Gaming" lang="es">
  <section
    class="relative flex min-h-dvh items-start justify-center overflow-hidden bg-gradient-to-br from-gray-800 via-gray-900 to-black pt-20 pb-20"
  >
    <div class="relative z-10 container mx-auto px-4 text-white">
      <div class="mx-auto max-w-7xl">
        <!-- Header with Logo -->
        <div class="mb-8 text-center">
          <div class="mx-auto mb-6 flex items-center justify-center">
            <div
              class="relative h-32 w-32 rounded-full border-4 border-[#3FA6E8] bg-gradient-to-br from-gray-800 to-gray-900 shadow-xl shadow-[#3FA6E8]/20 md:h-40 md:w-40"
            >
              <div class="relative h-full w-full overflow-hidden rounded-full">
                <Image src={logo} alt="Mostros Gaming Logo" class="h-full w-full object-contain" />
                <div class="pointer-events-none absolute inset-0 rounded-full shadow-[inset_0_0_20px_rgba(0,0,0,0.6)]"></div>
              </div>
            </div>
          </div>
          <h1 class="mb-2 text-2xl font-bold md:text-4xl">
            <span class="bg-gradient-to-r from-[#3FA6E8] via-[#F5C255] to-[#39DE42] bg-clip-text text-transparent"
              >Torneo Oficial Viernes de Gordos</span
            >
          </h1>
          <h2 class="text-base font-semibold text-white md:text-xl">Sponsoreado por Mostros Gaming</h2>
        </div>

        <!-- Loading state -->
        <div id="loading" class="text-center">
          <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-[#3FA6E8] border-r-transparent"></div>
          <p class="mt-2 text-[#F5C255]">Cargando datos...</p>
        </div>

        <!-- Hidden by default, shown after data loads -->
        <div id="content" class="hidden space-y-8">
          <!-- Standings Table -->
          <div class="flex justify-center">
            <div class="overflow-hidden rounded-lg border-2 border-[#3FA6E8] bg-gray-900/80 shadow-xl shadow-[#3FA6E8]/10">
              <div class="overflow-x-auto">
                <table class="text-sm">
                  <thead>
                    <tr class="border-b-2 border-[#3FA6E8] bg-gradient-to-r from-[#3FA6E8] to-[#3FA6E8]/80">
                      <th class="px-6 py-3 text-left font-bold text-white">Jugador</th>
                      <th class="px-4 py-3 text-center font-bold text-white">PTS</th>
                      <th class="px-4 py-3 text-center font-bold text-white">PJ</th>
                      <th class="px-4 py-3 text-center font-bold text-white">PG</th>
                      <th class="px-4 py-3 text-center font-bold text-white">PE</th>
                      <th class="px-4 py-3 text-center font-bold text-white">PP</th>
                      <th class="px-6 py-3 text-left font-bold text-white">Estado</th>
                    </tr>
                  </thead>
                  <tbody id="playerStatsBody">
                    <!-- Populated by JavaScript -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- Match History -->
          <div class="space-y-6">
            <h2 class="bg-gradient-to-r from-[#3FA6E8] to-[#39DE42] bg-clip-text text-center text-2xl font-bold text-transparent md:text-3xl">
              Historial de Partidos
            </h2>
            <div id="matchHistory" class="space-y-4">
              <!-- Populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    async function loadData() {
      try {
        // Helper function to format numbers: show one decimal if float, otherwise integer
        const formatNumber = (num: number): string => {
          return num % 1 === 0 ? num.toString() : num.toFixed(1);
        };

        // Fetch player stats
        const statsResponse = await fetch(
          'https://docs.google.com/spreadsheets/d/e/2PACX-1vSDltLEid06nepxJE3_0v7McOqSbhOqkrSJKd5KWBzGWB2DHWouTS1bE5TCSjREZ8xJHAIn_lMhMrwh/pub?gid=1418425775&single=true&output=csv',
        );
        const statsText = await statsResponse.text();
        const statsLines = statsText.trim().split('\n');
        const playerStats = statsLines.slice(1).map((line) => {
          const [nombre, jugados, ganados, empatados, perdidos, puntos, estado] = line.split(',');
          return {
            nombre: nombre?.trim() || '',
            jugados: parseFloat(jugados) || 0,
            ganados: parseFloat(ganados) || 0,
            empatados: parseFloat(empatados) || 0,
            perdidos: parseFloat(perdidos) || 0,
            puntos: parseFloat(puntos) || 0,
            estado: estado?.trim() || '',
          };
        });

        // Fetch match history
        const matchesResponse = await fetch(
          'https://docs.google.com/spreadsheets/d/e/2PACX-1vSDltLEid06nepxJE3_0v7McOqSbhOqkrSJKd5KWBzGWB2DHWouTS1bE5TCSjREZ8xJHAIn_lMhMrwh/pub?gid=546953721&single=true&output=csv',
        );
        const matchesText = await matchesResponse.text();
        const matchesLines = matchesText.trim().split('\n');
        const matches = matchesLines.slice(1).map((line) => {
          const parts = line.split(',');
          return {
            jugador1Equipo1: parts[0]?.trim() || '',
            jugador2Equipo1: parts[1]?.trim() || '',
            jugador3Equipo1: parts[2]?.trim() || '',
            jugador4Equipo1: parts[3]?.trim() || '',
            jugador5Equipo1: parts[4]?.trim() || '',
            jugador1Equipo2: parts[5]?.trim() || '',
            jugador2Equipo2: parts[6]?.trim() || '',
            jugador3Equipo2: parts[7]?.trim() || '',
            jugador4Equipo2: parts[8]?.trim() || '',
            jugador5Equipo2: parts[9]?.trim() || '',
            fecha: parts[10]?.trim() || '',
            ganador: parts[11]?.trim() || '',
            fechaNumero: parts[12]?.trim() || '',
          };
        });

        // Render player stats
        const playerStatsBody = document.getElementById('playerStatsBody');
        if (playerStatsBody) {
          playerStatsBody.innerHTML = playerStats
            .map(
              (player, index) => `
            <tr class="border-b border-gray-800/50 ${index % 2 === 0 ? 'bg-gray-800/40' : 'bg-gray-900/40'} hover:bg-[#3FA6E8]/10 transition-colors">
              <td class="px-6 py-3 font-semibold text-white">${player.nombre}</td>
              <td class="px-4 py-3 text-center font-bold text-[#F5C255]">${formatNumber(player.puntos)}</td>
              <td class="px-4 py-3 text-center text-gray-300">${formatNumber(player.jugados)}</td>
              <td class="px-4 py-3 text-center text-[#39DE42]">${formatNumber(player.ganados)}</td>
              <td class="px-4 py-3 text-center text-[#F5C255]">${formatNumber(player.empatados)}</td>
              <td class="px-4 py-3 text-center text-[#FD0100]">${formatNumber(player.perdidos)}</td>
              <td class="px-6 py-3 text-gray-300">${player.estado}</td>
            </tr>
          `,
            )
            .join('');
        }

        // Render match history (sort by fechaNumero descending - most recent first)
        const matchHistory = document.getElementById('matchHistory');
        if (matchHistory) {
          matchHistory.innerHTML = matches
            .sort((a, b) => parseInt(b.fechaNumero) - parseInt(a.fechaNumero))
            .map((match) => {
              const isTeam1Winner = match.ganador === 'E1';
              const isTeam2Winner = match.ganador === 'E2';
              const isTie = match.ganador === 'Empate';

              const team1Players = [
                match.jugador1Equipo1,
                match.jugador2Equipo1,
                match.jugador3Equipo1,
                match.jugador4Equipo1,
                match.jugador5Equipo1,
              ].filter((p) => p);

              const team2Players = [
                match.jugador1Equipo2,
                match.jugador2Equipo2,
                match.jugador3Equipo2,
                match.jugador4Equipo2,
                match.jugador5Equipo2,
              ].filter((p) => p);

              const team1Color = isTeam1Winner
                ? 'bg-[#19611d] text-white border-2 border-[#39DE42]/50'
                : isTie
                  ? 'bg-[#F5C255] text-gray-900 border-2 border-[#F5C255]/50'
                  : 'bg-[#7b0000] text-white border-2 border-[#FD0100]/50';

              const team2Color = isTeam2Winner
                ? 'bg-[#19611d] text-white border-2 border-[#39DE42]/50'
                : isTie
                  ? 'bg-[#F5C255] text-gray-900 border-2 border-[#F5C255]/50'
                  : 'bg-[#7b0000] text-white border-2 border-[#FD0100]/50';

              return `
            <div class="rounded-xl border-2 border-[#3FA6E8]/30 bg-gradient-to-br from-gray-800/80 to-gray-900/80 p-4 shadow-lg hover:shadow-[#3FA6E8]/20 transition-all">
              <div class="flex flex-col md:flex-row md:items-stretch md:gap-4">
                <!-- Team 1 -->
                <div class="flex-1">
                  <div class="grid grid-cols-5 gap-2 h-full">
                    ${team1Players
                      .map(
                        (player) => `
                      <div class="${team1Color} rounded-lg px-2 py-2 flex items-center justify-center text-center text-xs font-bold shadow-md h-12">
                        <span class="line-clamp-2 leading-tight">${player}</span>
                      </div>
                    `,
                      )
                      .join('')}
                  </div>
                </div>

                <!-- Center info -->
                <div class="my-3 flex flex-col items-center justify-center md:my-0 md:min-w-[100px] md:border-x-2 md:border-[#3FA6E8]/30 md:px-3">
                  <div class="text-center text-sm font-bold text-[#3FA6E8]">Fecha ${match.fechaNumero}</div>
                  <div class="text-center text-xs text-[#F5C255] mt-1">${match.fecha}</div>
                </div>

                <!-- Team 2 -->
                <div class="flex-1">
                  <div class="grid grid-cols-5 gap-2 h-full">
                    ${team2Players
                      .map(
                        (player) => `
                      <div class="${team2Color} rounded-lg px-2 py-2 flex items-center justify-center text-center text-xs font-bold shadow-md h-12">
                        <span class="line-clamp-2 leading-tight">${player}</span>
                      </div>
                    `,
                      )
                      .join('')}
                  </div>
                </div>
              </div>
            </div>
          `;
            })
            .join('');
        }

        // Hide loading, show content
        const loadingElement = document.getElementById('loading');
        const contentElement = document.getElementById('content');
        if (loadingElement) {
          loadingElement.classList.add('hidden');
        }
        if (contentElement) {
          contentElement.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error loading data:', error);
        const loadingElement = document.getElementById('loading');
        if (loadingElement) {
          loadingElement.innerHTML = `
            <p class="text-[#FD0100] font-semibold">Error al cargar los datos. Por favor, recarga la página.</p>
          `;
        }
      }
    }

    // Load data when page loads
    loadData();
  </script>
</Layout>
